/*
 * File: test_ekf.c
 *
 *
 *   --- THIS FILE GENERATED BY S-FUNCTION BUILDER: 3.0 ---
 *
 *   This file is an S-function produced by the S-Function
 *   Builder which only recognizes certain fields.  Changes made
 *   outside these fields will be lost the next time the block is
 *   used to load, edit, and resave this file. This file will be overwritten
 *   by the S-function Builder block. If you want to edit this file by hand,
 *   you must change it only in the area defined as:
 *
 *        %%%-SFUNWIZ_defines_Changes_BEGIN
 *        #define NAME 'replacement text'
 *        %%% SFUNWIZ_defines_Changes_END
 *
 *   DO NOT change NAME--Change the 'replacement text' only.
 *
 *   For better compatibility with the Simulink Coder, the
 *   "wrapper" S-function technique is used.  This is discussed
 *   in the Simulink Coder's Manual in the Chapter titled,
 *   "Wrapper S-functions".
 *
 *  -------------------------------------------------------------------------
 * | See matlabroot/simulink/src/sfuntmpl_doc.c for a more detailed template |
 *  -------------------------------------------------------------------------
 *
 * Created: Sun Aug 15 13:39:59 2021
 */

#define S_FUNCTION_LEVEL 2
#define S_FUNCTION_NAME test_ekf
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
/* %%%-SFUNWIZ_defines_Changes_BEGIN --- EDIT HERE TO _END */
#define NUM_INPUTS            3
/* Input Port  0 */
#define IN_PORT_0_NAME        sensorMeasurements
#define INPUT_0_WIDTH         1
#define INPUT_DIMS_0_COL      1
#define INPUT_0_DTYPE         real_T
#define INPUT_0_COMPLEX       COMPLEX_NO
#define IN_0_FRAME_BASED      FRAME_NO
#define IN_0_BUS_BASED        1
#define IN_0_BUS_NAME         SensorMeasurements
#define IN_0_DIMS             1-D
#define INPUT_0_FEEDTHROUGH   0
#define IN_0_ISSIGNED         0
#define IN_0_WORDLENGTH       8
#define IN_0_FIXPOINTSCALING  1
#define IN_0_FRACTIONLENGTH   9
#define IN_0_BIAS             0
#define IN_0_SLOPE            0.125
/* Input Port  1 */
#define IN_PORT_1_NAME        forces
#define INPUT_1_WIDTH         1
#define INPUT_DIMS_1_COL      1
#define INPUT_1_DTYPE         real_T
#define INPUT_1_COMPLEX       COMPLEX_NO
#define IN_1_FRAME_BASED      FRAME_NO
#define IN_1_BUS_BASED        1
#define IN_1_BUS_NAME         Vector3
#define IN_1_DIMS             2-D
#define INPUT_1_FEEDTHROUGH   0
#define IN_1_ISSIGNED         0
#define IN_1_WORDLENGTH       8
#define IN_1_FIXPOINTSCALING  1
#define IN_1_FRACTIONLENGTH   9
#define IN_1_BIAS             0
#define IN_1_SLOPE            0.125
/* Input Port  2 */
#define IN_PORT_2_NAME        torques
#define INPUT_2_WIDTH         1
#define INPUT_DIMS_2_COL      1
#define INPUT_2_DTYPE         real_T
#define INPUT_2_COMPLEX       COMPLEX_NO
#define IN_2_FRAME_BASED      FRAME_NO
#define IN_2_BUS_BASED        1
#define IN_2_BUS_NAME         Vector3
#define IN_2_DIMS             2-D
#define INPUT_2_FEEDTHROUGH   0
#define IN_2_ISSIGNED         0
#define IN_2_WORDLENGTH       8
#define IN_2_FIXPOINTSCALING  1
#define IN_2_FRACTIONLENGTH   9
#define IN_2_BIAS             0
#define IN_2_SLOPE            0.125

#define NUM_OUTPUTS           2
/* Output Port  0 */
#define OUT_PORT_0_NAME       aircraftState
#define OUTPUT_0_WIDTH        1
#define OUTPUT_DIMS_0_COL     1
#define OUTPUT_0_DTYPE        real_T
#define OUTPUT_0_COMPLEX      COMPLEX_NO
#define OUT_0_FRAME_BASED     FRAME_NO
#define OUT_0_BUS_BASED       1
#define OUT_0_BUS_NAME        AircraftState
#define OUT_0_DIMS            1-D
#define OUT_0_ISSIGNED        1
#define OUT_0_WORDLENGTH      8
#define OUT_0_FIXPOINTSCALING 1
#define OUT_0_FRACTIONLENGTH  3
#define OUT_0_BIAS            0
#define OUT_0_SLOPE           0.125
/* Output Port  1 */
#define OUT_PORT_1_NAME       railLocation
#define OUTPUT_1_WIDTH        1
#define OUTPUT_DIMS_1_COL     1
#define OUTPUT_1_DTYPE        real_T
#define OUTPUT_1_COMPLEX      COMPLEX_NO
#define OUT_1_FRAME_BASED     FRAME_NO
#define OUT_1_BUS_BASED       1
#define OUT_1_BUS_NAME        RailLocation
#define OUT_1_DIMS            1-D
#define OUT_1_ISSIGNED        1
#define OUT_1_WORDLENGTH      8
#define OUT_1_FIXPOINTSCALING 1
#define OUT_1_FRACTIONLENGTH  3
#define OUT_1_BIAS            0
#define OUT_1_SLOPE           0.125

#define NPARAMS               0

#define SAMPLE_TIME_0         INHERITED_SAMPLE_TIME
#define NUM_DISC_STATES       0
#define DISC_STATES_IC        [0]
#define NUM_CONT_STATES       0
#define CONT_STATES_IC        [0]

#define SFUNWIZ_GENERATE_TLC  1
#define SOURCEFILES           "__SFB__"
#define PANELINDEX            N/A
#define USE_SIMSTRUCT         0
#define SHOW_COMPILE_STEPS    0
#define CREATE_DEBUG_MEXFILE  0
#define SAVE_CODE_ONLY        1
#define SFUNWIZ_REVISION      3.0
/* %%%-SFUNWIZ_defines_Changes_END --- EDIT HERE TO _BEGIN */
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
#include "simstruc.h"
#include "AircraftState.h"
#include "RailLocation.h"
#include "SensorMeasurements.h"
#include "Vector3.h"
#include "EKF.h"

/*
 * Code Generation Environment flag (simulation or standalone target).
 */
static int_T isSimulationTarget;

/* Utility function prototypes. */
static int_T GetRTWEnvironmentMode(SimStruct *S);
/* Macro used to check if Simulation mode is set to accelerator */
#define isBusDWorkPresent  ( ( ( !ssRTWGenIsCodeGen(S) || isSimulationTarget ) && !ssIsExternalSim(S) ) || ssIsRapidAcceleratorActive(S) )

typedef struct {
    int_T offset;
    int_T elemSize;
    int_T numElems;
} busInfoStruct;

/*====================*
 * S-function methods *
 *====================*/
/* Function: mdlInitializeSizes ===============================================
 * Abstract:
 *   Setup sizes of the various vectors.
 */
static void mdlInitializeSizes(SimStruct *S) {

    DECL_AND_INIT_DIMSINFO(inputDimsInfo);
    DECL_AND_INIT_DIMSINFO(outputDimsInfo);
    ssSetNumSFcnParams(S, NPARAMS);
    if (ssGetNumSFcnParams(S) != ssGetSFcnParamsCount(S)) {
        return; /* Parameter mismatch will be reported by Simulink */
    }

    ssSetArrayLayoutForCodeGen(S, SS_COLUMN_MAJOR);

    ssSetOperatingPointCompliance(S, USE_DEFAULT_OPERATING_POINT);

    ssSetNumContStates(S, NUM_CONT_STATES);
    ssSetNumDiscStates(S, NUM_DISC_STATES);


    if (!ssSetNumInputPorts(S, NUM_INPUTS)) return;
    /* Input Port 0 */

    /* Register SensorMeasurements datatype for Input port 0 */

#if defined(MATLAB_MEX_FILE)
    if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY)
    {
        DTypeId dataTypeIdReg;
        ssRegisterTypeFromNamedObject(S, "SensorMeasurements", &dataTypeIdReg);
        if(dataTypeIdReg == INVALID_DTYPE_ID) return;
        ssSetInputPortDataType(S, 0, dataTypeIdReg);
    }
#endif
    ssSetInputPortWidth(S, 0, INPUT_0_WIDTH);
    ssSetInputPortComplexSignal(S, 0, INPUT_0_COMPLEX);
    ssSetInputPortDirectFeedThrough(S, 0, INPUT_0_FEEDTHROUGH);
    ssSetInputPortRequiredContiguous(S, 0, 1); /*direct input signal access*/
    ssSetBusInputAsStruct(S, 0, IN_0_BUS_BASED);
    ssSetInputPortBusMode(S, 0, SL_BUS_MODE);
    /* Input Port 1 */

    /* Register Vector3 datatype for Input port 1 */

#if defined(MATLAB_MEX_FILE)
    if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY)
    {
        DTypeId dataTypeIdReg;
        ssRegisterTypeFromNamedObject(S, "Vector3", &dataTypeIdReg);
        if(dataTypeIdReg == INVALID_DTYPE_ID) return;
        ssSetInputPortDataType(S, 1, dataTypeIdReg);
    }
#endif
    ssSetInputPortWidth(S, 1, INPUT_1_WIDTH);
    ssSetInputPortComplexSignal(S, 1, INPUT_1_COMPLEX);
    ssSetInputPortDirectFeedThrough(S, 1, INPUT_1_FEEDTHROUGH);
    ssSetInputPortRequiredContiguous(S, 1, 1); /*direct input signal access*/
    ssSetBusInputAsStruct(S, 1, IN_1_BUS_BASED);
    ssSetInputPortBusMode(S, 1, SL_BUS_MODE);
    /* Input Port 2 */

    /* Register Vector3 datatype for Input port 2 */

#if defined(MATLAB_MEX_FILE)
    if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY)
    {
        DTypeId dataTypeIdReg;
        ssRegisterTypeFromNamedObject(S, "Vector3", &dataTypeIdReg);
        if(dataTypeIdReg == INVALID_DTYPE_ID) return;
        ssSetInputPortDataType(S, 2, dataTypeIdReg);
    }
#endif
    ssSetInputPortWidth(S, 2, INPUT_2_WIDTH);
    ssSetInputPortComplexSignal(S, 2, INPUT_2_COMPLEX);
    ssSetInputPortDirectFeedThrough(S, 2, INPUT_2_FEEDTHROUGH);
    ssSetInputPortRequiredContiguous(S, 2, 1); /*direct input signal access*/
    ssSetBusInputAsStruct(S, 2, IN_2_BUS_BASED);
    ssSetInputPortBusMode(S, 2, SL_BUS_MODE);

    if (!ssSetNumOutputPorts(S, NUM_OUTPUTS)) return;
    /* Output Port 0 */

    /* Register AircraftState datatype for Output port 0 */

#if defined(MATLAB_MEX_FILE)
    if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY)
    {
        DTypeId dataTypeIdReg;
        ssRegisterTypeFromNamedObject(S, "AircraftState", &dataTypeIdReg);
        if(dataTypeIdReg == INVALID_DTYPE_ID) return;
        ssSetOutputPortDataType(S, 0, dataTypeIdReg);
    }
#endif

    ssSetBusOutputObjectName(S, 0, (void *) "AircraftState");
    ssSetOutputPortWidth(S, 0, OUTPUT_0_WIDTH);
    ssSetOutputPortComplexSignal(S, 0, OUTPUT_0_COMPLEX);
    ssSetBusOutputAsStruct(S, 0, OUT_0_BUS_BASED);
    ssSetOutputPortBusMode(S, 0, SL_BUS_MODE);
    /* Output Port 1 */

    /* Register RailLocation datatype for Output port 1 */

#if defined(MATLAB_MEX_FILE)
    if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY)
    {
        DTypeId dataTypeIdReg;
        ssRegisterTypeFromNamedObject(S, "RailLocation", &dataTypeIdReg);
        if(dataTypeIdReg == INVALID_DTYPE_ID) return;
        ssSetOutputPortDataType(S, 1, dataTypeIdReg);
    }
#endif

    ssSetBusOutputObjectName(S, 1, (void *) "RailLocation");
    ssSetOutputPortWidth(S, 1, OUTPUT_1_WIDTH);
    ssSetOutputPortComplexSignal(S, 1, OUTPUT_1_COMPLEX);
    ssSetBusOutputAsStruct(S, 1, OUT_1_BUS_BASED);
    ssSetOutputPortBusMode(S, 1, SL_BUS_MODE);

    if (ssRTWGenIsCodeGen(S)) {
        isSimulationTarget = GetRTWEnvironmentMode(S);
        if (isSimulationTarget == -1) {
            ssSetErrorStatus(S, " Unable to determine a valid code generation environment mode");
            return;
        }
        isSimulationTarget |= ssRTWGenIsModelReferenceSimTarget(S);
    }

    /* Set the number of dworks */
    if (!isBusDWorkPresent) {
        if (!ssSetNumDWork(S, 0)) return;
    } else {
        if (!ssSetNumDWork(S, 5)) return;
    }

    if (isBusDWorkPresent) {

        /*
         * Configure the dwork 0 (sensorMeasurementsBUS)
         */
#if defined(MATLAB_MEX_FILE)
        if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
            DTypeId dataTypeIdReg;
            ssRegisterTypeFromNamedObject(S, "SensorMeasurements", &dataTypeIdReg);
            if (dataTypeIdReg == INVALID_DTYPE_ID) return;
            ssSetDWorkDataType(S, 0, dataTypeIdReg);
        }
#endif

        ssSetDWorkUsageType(S, 0, SS_DWORK_USED_AS_DWORK);
        ssSetDWorkName(S, 0, "sensorMeasurementsBUS");
        ssSetDWorkWidth(S, 0, DYNAMICALLY_SIZED);
        ssSetDWorkComplexSignal(S, 0, COMPLEX_NO);

        /*
         * Configure the dwork 1 (forcesBUS)
         */
#if defined(MATLAB_MEX_FILE)
        if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
            DTypeId dataTypeIdReg;
            ssRegisterTypeFromNamedObject(S, "Vector3", &dataTypeIdReg);
            if (dataTypeIdReg == INVALID_DTYPE_ID) return;
            ssSetDWorkDataType(S, 1, dataTypeIdReg);
        }
#endif

        ssSetDWorkUsageType(S, 1, SS_DWORK_USED_AS_DWORK);
        ssSetDWorkName(S, 1, "forcesBUS");
        ssSetDWorkWidth(S, 1, DYNAMICALLY_SIZED);
        ssSetDWorkComplexSignal(S, 1, COMPLEX_NO);

        /*
         * Configure the dwork 2 (torquesBUS)
         */
#if defined(MATLAB_MEX_FILE)
        if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
            DTypeId dataTypeIdReg;
            ssRegisterTypeFromNamedObject(S, "Vector3", &dataTypeIdReg);
            if (dataTypeIdReg == INVALID_DTYPE_ID) return;
            ssSetDWorkDataType(S, 2, dataTypeIdReg);
        }
#endif

        ssSetDWorkUsageType(S, 2, SS_DWORK_USED_AS_DWORK);
        ssSetDWorkName(S, 2, "torquesBUS");
        ssSetDWorkWidth(S, 2, DYNAMICALLY_SIZED);
        ssSetDWorkComplexSignal(S, 2, COMPLEX_NO);

        /*
         * Configure the dwork 3 (aircraftStateBUS)
         */
#if defined(MATLAB_MEX_FILE)
        if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
            DTypeId dataTypeIdReg;
            ssRegisterTypeFromNamedObject(S, "AircraftState", &dataTypeIdReg);
            if (dataTypeIdReg == INVALID_DTYPE_ID) return;
            ssSetDWorkDataType(S, 3, dataTypeIdReg);
        }
#endif

        ssSetDWorkUsageType(S, 3, SS_DWORK_USED_AS_DWORK);
        ssSetDWorkName(S, 3, "aircraftStateBUS");
        ssSetDWorkWidth(S, 3, DYNAMICALLY_SIZED);
        ssSetDWorkComplexSignal(S, 3, COMPLEX_NO);

        /*
         * Configure the dwork 4 (railLocationBUS)
         */
#if defined(MATLAB_MEX_FILE)
        if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
            DTypeId dataTypeIdReg;
            ssRegisterTypeFromNamedObject(S, "RailLocation", &dataTypeIdReg);
            if (dataTypeIdReg == INVALID_DTYPE_ID) return;
            ssSetDWorkDataType(S, 4, dataTypeIdReg);
        }
#endif

        ssSetDWorkUsageType(S, 4, SS_DWORK_USED_AS_DWORK);
        ssSetDWorkName(S, 4, "railLocationBUS");
        ssSetDWorkWidth(S, 4, DYNAMICALLY_SIZED);
        ssSetDWorkComplexSignal(S, 4, COMPLEX_NO);
    }
    ssSetNumPWork(S, 0);

    ssSetNumSampleTimes(S, 1);
    ssSetNumRWork(S, 0);
    ssSetNumIWork(S, 0);
    ssSetNumModes(S, 0);
    ssSetNumNonsampledZCs(S, 0);

    ssSetSimulinkVersionGeneratedIn(S, "10.3");

    /* Take care when specifying exception free code - see sfuntmpl_doc.c */
    ssSetOptions(S, (SS_OPTION_EXCEPTION_FREE_CODE |
                     SS_OPTION_USE_TLC_WITH_ACCELERATOR |
                     SS_OPTION_WORKS_WITH_CODE_REUSE));
}

/* Function: mdlInitializeSampleTimes =========================================
 * Abstract:
 *    Specifiy  the sample time.
 */
static void mdlInitializeSampleTimes(SimStruct *S) {
    ssSetSampleTime(S, 0, SAMPLE_TIME_0);
    ssSetModelReferenceSampleTimeDefaultInheritance(S);
    ssSetOffsetTime(S, 0, 0.0);
}

#define MDL_SET_INPUT_PORT_DATA_TYPE

static void mdlSetInputPortDataType(SimStruct *S, int port, DTypeId dType) {
    ssSetInputPortDataType(S, 0, dType);
}

#define MDL_SET_OUTPUT_PORT_DATA_TYPE

static void mdlSetOutputPortDataType(SimStruct *S, int port, DTypeId dType) {
    ssSetOutputPortDataType(S, 0, dType);
}

#define MDL_SET_DEFAULT_PORT_DATA_TYPES

static void mdlSetDefaultPortDataTypes(SimStruct *S) {
    ssSetInputPortDataType(S, 0, SS_DOUBLE);
    ssSetOutputPortDataType(S, 0, SS_DOUBLE);
}

#define MDL_SET_WORK_WIDTHS
#if defined(MDL_SET_WORK_WIDTHS) && defined(MATLAB_MEX_FILE)

static void mdlSetWorkWidths(SimStruct *S)
{
    /* Set the width of DWork(s) used for marshalling the IOs */
    if (isBusDWorkPresent) {

        /* Update dwork 0 */
        ssSetDWorkWidth(S, 0, ssGetInputPortWidth(S, 0));

        /* Update dwork 1 */
        ssSetDWorkWidth(S, 1, ssGetInputPortWidth(S, 1));

        /* Update dwork 2 */
        ssSetDWorkWidth(S, 2, ssGetInputPortWidth(S, 2));

        /* Update dwork 3 */
        ssSetDWorkWidth(S, 3, ssGetOutputPortWidth(S, 0));

        /* Update dwork 4 */
        ssSetDWorkWidth(S, 4, ssGetOutputPortWidth(S, 1));

    }

}

#endif

#define MDL_START  /* Change to #undef to remove function */
#if defined(MDL_START)

/* Function: mdlStart =======================================================
 * Abstract:
 *    This function is called once at start of model execution. If you
 *    have states that should be initialized once, this is the place
 *    to do it.
 */
static void mdlStart(SimStruct *S) {
    /* Bus Information */
    slDataTypeAccess *dta = ssGetDataTypeAccess(S);
    const char *bpath = ssGetPath(S);
    DTypeId AircraftStateId = ssGetDataTypeId(S, "AircraftState");
    DTypeId RailLocationId = ssGetDataTypeId(S, "RailLocation");
    DTypeId SensorMeasurementsId = ssGetDataTypeId(S, "SensorMeasurements");
    DTypeId Vector3Id = ssGetDataTypeId(S, "Vector3");

    busInfoStruct *busInfo = (busInfoStruct *) malloc(0 * sizeof(busInfoStruct));
    if (busInfo == NULL) {
        ssSetErrorStatus(S, "Memory allocation failure");
        return;
    }

    /* Calculate offsets of all primitive elements of the bus */

    ssSetUserData(S, busInfo);

    // Store new C++ object in the pointers vector
    EKF *ekf = new EKF{};
    ssGetPWork(S)[0] = ekf;
}

#endif /*  MDL_START */

/* Function: mdlOutputs =======================================================
 *
 */
static void mdlOutputs(SimStruct *S, int_T tid) {
    // Retrieve C++ object from the pointers vector
    EKF *ekf = static_cast<EKF *>(ssGetPWork(S)[0]);

    // Get data addresses of I/O
    const SensorMeasurements *sensorMeasurements = (SensorMeasurements *) ssGetInputPortRealSignalPtrs(S, 0);
    const Vector3 *forces = (Vector3 *) ssGetInputPortRealSignalPtrs(S, 1);
    const Vector3 *torques = (Vector3 *) ssGetInputPortRealSignalPtrs(S, 2);
    AircraftState *aircraftState = (AircraftState *) ssGetOutputPortSignal(S, 0);
    RailLocation *railLocation = (RailLocation *) ssGetOutputPortSignal(S, 1);

    ekf->update(*sensorMeasurements, *forces, *torques, 0.01);
    ekf->getOutput(aircraftState, railLocation);
}

/* Function: mdlTerminate =====================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.  For example, if memory was
 *    allocated in mdlStart, this is the place to free it.
 */
static void mdlTerminate(SimStruct *S) {
    /* Free stored bus information */
    busInfoStruct *busInfo = (busInfoStruct *) ssGetUserData(S);
    if (busInfo != NULL) {
        free(busInfo);
    }

    // Retrieve and destroy C++ object
    EKF *ekf = static_cast<EKF *>(ssGetPWork(S)[0]);
    delete ekf;
}

static int_T GetRTWEnvironmentMode(SimStruct *S) {
    int_T status = -1;
    mxArray *plhs[1];
    mxArray *prhs[1];
    mxArray *err;

    /*
     * Get the name of the Simulink block diagram
     */
    prhs[0] = mxCreateString(ssGetModelName(ssGetRootSS(S)));
    plhs[0] = NULL;

    /*
     * Call "isSimulationTarget = rtwenvironmentmode(modelName)" in MATLAB
     */
    err = mexCallMATLABWithTrap(1, plhs, 1, prhs, "rtwenvironmentmode");
    mxDestroyArray(prhs[0]);

    /*
     * Set the error status if an error occurred
     */
    if (err) {
        if (plhs[0]) {
            mxDestroyArray(plhs[0]);
            plhs[0] = NULL;
        }
        ssSetErrorStatus(S, "Unknown error during call to 'rtwenvironmentmode'.");
        return -1;
    }

    /*
     * Get the value returned by rtwenvironmentmode(modelName)
    */
    if (plhs[0]) {
        status = (int_T)(mxGetScalar(plhs[0]) != 0);
        mxDestroyArray(plhs[0]);
        plhs[0] = NULL;
    }

    return (status);
}

#ifdef  MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */
#include "simulink.c"      /* MEX-file interface mechanism */
#else

#include "cg_sfun.h"       /* Code generation registration function */

#endif



